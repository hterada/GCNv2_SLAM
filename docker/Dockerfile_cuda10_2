# FROM nvidia/cuda:11.4.1-cudnn8-devel-ubuntu18.04
FROM  nvidia/cuda:10.2-cudnn7-devel-ubuntu18.04
LABEL maintainer "Hideo TERADA <h.tee2006@gmail.com>"

ENV DEBIAN_FRONTEND=noninteractive

RUN apt-get update && apt-get install -y git
RUN apt-get install -y python3
RUN apt-get install -y python3-pip

RUN apt-get install -y tzdata
RUN apt-get install -y cmake
RUN apt-get install -y python-yaml
RUN apt-get install -y software-properties-common

RUN apt-get install -y wget
RUN wget https://bootstrap.pypa.io/pip/2.7/get-pip.py
RUN python get-pip.py
RUN pip install typing

# nccl
RUN apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/7fa2af80.pub
RUN add-apt-repository "deb https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/ /"
RUN apt update
RUN apt install -y --allow-change-held-packages libnccl2 libnccl-dev

RUN wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/cuda-ubuntu1804.pin
RUN mv cuda-ubuntu1804.pin /etc/apt/preferences.d/cuda-repository-pin-600
RUN apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/7fa2af80.pub
RUN add-apt-repository "deb https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/ /"
RUN apt-get update  -y

# gloo
WORKDIR /
RUN git clone --recursive https://github.com/facebookincubator/gloo.git
WORKDIR /gloo/build
RUN cmake ..
RUN make
RUN make install

# NUMA
RUN apt-get install -y libnuma-dev

# Pytorch C++ lib
WORKDIR /
ARG pytorch_src_update=3
RUN git clone --recursive -b v1.0.1-cudnn8.2 https://github.com/hterada/pytorch.git
WORKDIR /pytorch/build
RUN python ../tools/build_libtorch.py

# # Catch2 (for Pangolin)
# WORKDIR /
# RUN git clone --recursive https://github.com/catchorg/Catch2.git
# RUN mkdir /Catch2/build
# WORKDIR /Catch2/build
# RUN cmake .. && make . install

# Pangolin
WORKDIR /
ARG pangolin_src_update=1
RUN git clone --recursive -b build_on_dlbox1 https://github.com/hterada/Pangolin.git
WORKDIR /Pangolin
RUN ./scripts/install_prerequisites.sh recommended
WORKDIR /Pangolin/build
RUN cmake ..
RUN cmake --build .
RUN cmake --build . --target install
RUN cmake --build . --target clean

# OpenCV
WORKDIR /
RUN apt-get install -y libopencv-dev

# Eigen3
WORKDIR /
RUN apt-get install -y libeigen3-dev

# GCNv2
WORKDIR /
ARG gcnv2_src_update=1
RUN git clone -b build_docker_image https://github.com/hterada/GCNv2_SLAM.git
WORKDIR /GCNv2_SLAM
RUN ./build.sh

# PATH
ENV LD_LIBRARY_PATH /usr/local/cuda/lib64:$LD_LIBRARY_PATH

# END ####
WORKDIR /
